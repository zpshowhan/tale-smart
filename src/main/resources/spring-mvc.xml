<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd    
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
  	  default-lazy-init="true">
    
    <!-- 开启注解方案2 -->  
    <mvc:annotation-driven />
    
    <!-- 注解扫描的包 -->  
    <context:component-scan base-package="org.esmart.tale" />  
    
    <!-- 启动自动扫描 -->
     <context:component-scan base-package="org.esmart.tale.controller">
     	<!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 -->
         <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
  
  
  
    <!-- 静态资源访问，方案1 -->  
    <!-- <mvc:resources location="/static/**" mapping="/images/**" />
    <mvc:resources location="/plugins/**" mapping="/img/**" />  
    <mvc:resources mapping="/images/**" location="/images/**" />
	<mvc:resources mapping="/img/**" location="/img/**" />
	<mvc:resources mapping="/js/**" location="/js/**" />
	<mvc:resources mapping="/css/**" location="/css/**" /> -->
  
  	<!-- 静态资源访问，方案2 -->  
    <mvc:default-servlet-handler/> 
     
     	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 采用SpringMVC自带的JSON转换工具，支持@ResponseBody注解 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" />    <!-- JSON转换器 -->
			</list>
		</property>
	</bean>
     
  	<!--配置拦截器, 多个拦截器,顺序执行 （mvc拦截器和filter择其一）-->  
	<mvc:interceptors>    
	    <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller 
	        
				/**的意思是所有文件夹及里面的子文件夹
				/*是所有文件夹，不含子文件夹
				/是web项目的根目录 --> 
			 
	        <mvc:mapping path="/**" /> 
	        <!-- 不拦截的地址 -->
	        <mvc:exclude-mapping path="/templates/**" />
	        <mvc:exclude-mapping path="/static/**" />
	        <mvc:exclude-mapping path="/plugins/**" />
	        
	        <mvc:exclude-mapping path="/admin/login" />
	        <mvc:exclude-mapping path="/admin/logout" />
	        
	        <bean class="org.esmart.tale.web.AuthInterceptor">
	        	<!-- 不需要权限验证的地址 --> 
                <property name="excludeUrls">
                    <list>
                        <value>login</value><!-- 登录操作 -->
                        <value>logout</value><!-- 登出操作 -->
                    </list>
                </property>
	        </bean>
	    </mvc:interceptor>  
	    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，
	    然后逆序调用每个拦截器的postHandle和afterCompletion方法   -->
	</mvc:interceptors> 
	
	<!-- freemarker的配置 -->
    <!-- <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/freemarker/" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
    </bean> -->
	  <!--1、 FreeMarker视图解析 在这里配置后缀名ftl和视图解析器。。 -->
	   <!--  <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
	        <property name="suffix" value=".ftl" />
	        <property name="contentType" value="text/html;charset=UTF-8" />
	        <property name="exposeRequestAttributes" value="true" />
	        <property name="exposeSessionAttributes" value="true" />
	        <property name="exposeSpringMacroHelpers" value="true" />
	    </bean> -->
    <!--2、 视图解释类 -->  
    <!-- <bean id="viewResolver"  
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/> 
        <property name="prefix" value="/WEB-INF/jsp/"></property>  
	可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  
        <property name="suffix" value=".jsp"></property>  
    </bean>  --> 
    <!-- 3、jetbrick-template + spring mvc -->
	  <bean id="viewResolver" class="jetbrick.template.web.springmvc.JetTemplateViewResolver">
	    <property name="order" value="1" />
	    <property name="contentType" value="text/html; charset=utf-8" />
	    <property name="suffix" value=".html" />
	
<!-- 	    指定配置文件 -->
	    <property name="configLocation" value="/WEB-INF/jetbrick-template.properties" />
	
<!-- 	    直接配置属性（与文件配置选择其一） -->
	    <!-- <property name="configProperties">
	        <props>
	            <prop key="jetx.input.encoding">utf-8</prop>
	            <prop key="jetx.output.encoding">utf-8</prop>
	        </props>
	    </property> -->
	</bean>
  
    <!-- 上传文件bean -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
        <property name="defaultEncoding" value="utf-8" /> 
        <property name="maxUploadSize"   value="1048576000" /> 
        <property name="maxInMemorySize" value="1024000" />   
    </bean> 
</beans>