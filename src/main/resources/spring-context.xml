<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/cache
    	http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 引入数据库配置文件 -->
<!--     <context:property-placeholder location="classpath:jdbc.properties"/> -->
    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
	
    <!-- 配置C3P0 数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!-- 配置 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mappings/*.xml"></property>
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 加载数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- mybatis 分页插件 -->
        <!-- <property name="plugins">
	    <array>
	      <bean class="com.github.pagehelper.PageHelper">
	        <property name="properties">
	          <value>
	            dialect=mysql
	          </value>
	        </property>
	      </bean>
	    </array>
	  </property> -->
    </bean>

    <!-- 通过MapperScannerConfigurer进行mapper扫描（建议使用）
     mapper 批量扫描，从 mapper 包中扫描出 mapper 接口，自动创建代理对象，并在 spring 容器中注册名陈为类名首字母小写。
    	 遵循的规范：将 mapper.java 和 mapper.xml 映射文件名陈一致，且在同一个目录
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描的包，如果存在多个包使用(逗号,)分割 -->
        <property name="basePackage" value="org.esmart.tale.mapper" />
        <!-- 注意此处是sqlSessionFactoryBeanName，如果写成 sqlSessionFactory，ref="sqlSessionFactory"
             会造成 <context:property-placeholder location="classpath:config/db.properties"/> 失效 而连接不上数据库
         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
     <!-- (事务管理器)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <!-- 使用声明式事务  （1）
         transaction-manager：引用上面定义的事务管理器  
     --> 
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 定义个通知，指定事务管理器 -->
    <!-- <tx:advice id="txAdvice" transaction-manager="txManager">
         <tx:attributes>
             <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
             <tx:method name="save*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
             <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
             <tx:method name="update*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
             <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
             <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
             <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
             <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
             <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
         </tx:attributes>
     </tx:advice> -->
     
     <!-- <aop:config>
         配置一个切入点
         <aop:pointcut id="serviceMethods" expression="execution(* org.esmart.tale.service.impl.*ServiceImpl.*(..))" />
         <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
     </aop:config> -->
     
     <bean id="ApplicationContextUtil" class="org.esmart.tale.utils.ApplicationContextUtil"/>
     
     <!--****************** 缓存设置 *******************-->
    <cache:annotation-driven cache-manager="cacheManager" />
    
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <constructor-arg name="cacheManager">
            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
                <property name="configLocation" value="classpath:ehcache.xml"/>
            </bean>
        </constructor-arg>
    </bean>
</beans>